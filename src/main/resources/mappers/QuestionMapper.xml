<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.QuestionMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.Question">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="question_auth" jdbcType="INTEGER" property="questionAuth" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="module_id" jdbcType="VARCHAR" property="moduleId" />
    <result column="correct_answer" jdbcType="VARCHAR" property="correctAnswer" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="knowledge" jdbcType="VARCHAR" property="knowledge" />
    <result column="score" jdbcType="DOUBLE" property="score" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type, question_auth, level, module_id, correct_answer, content, knowledge, score, 
    create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_yu_question
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="findList" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_yu_question
    where  1 = 1
    <if test="type != null">
      `type` = #{type}
    </if>
    <if test="questionAuth != null">
      question_auth = #{questionAuth}
    </if>
    <if test="level != null">
      `level` = #{level}
    </if>
    <if test="moduleId != null">
      module_id = #{moduleId}
    </if>
  </select>
  <!-- 随机获取试题 -->
  <select id="findListByRand" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_yu_question
    where  1 = 1
    <if test="type != null">
      `type` = #{type}
    </if>
    <if test="questionAuth != null">
      question_auth = #{questionAuth}
    </if>
    <if test="level != null">
      `level` = #{level}
    </if>
    order by rand()
    limit #{pageSize}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_yu_question
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.Question">
    insert into t_yu_question (id, type, question_auth, 
      level, module_id, correct_answer, 
      content, knowledge, score, 
      create_time)
    values (#{id,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{questionAuth,jdbcType=INTEGER}, 
      #{level,jdbcType=INTEGER}, #{moduleId,jdbcType=VARCHAR}, #{correctAnswer,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{knowledge,jdbcType=VARCHAR}, #{score,jdbcType=DOUBLE}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.Question">
    insert into t_yu_question
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="questionAuth != null">
        question_auth,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="moduleId != null">
        module_id,
      </if>
      <if test="correctAnswer != null">
        correct_answer,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="knowledge != null">
        knowledge,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="questionAuth != null">
        #{questionAuth,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="moduleId != null">
        #{moduleId,jdbcType=VARCHAR},
      </if>
      <if test="correctAnswer != null">
        #{correctAnswer,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="knowledge != null">
        #{knowledge,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.Question">
    update t_yu_question
    <set>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="questionAuth != null">
        question_auth = #{questionAuth,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="moduleId != null">
        module_id = #{moduleId,jdbcType=VARCHAR},
      </if>
      <if test="correctAnswer != null">
        correct_answer = #{correctAnswer,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="knowledge != null">
        knowledge = #{knowledge,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.Question">
    update t_yu_question
    set type = #{type,jdbcType=INTEGER},
      question_auth = #{questionAuth,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
      module_id = #{moduleId,jdbcType=VARCHAR},
      correct_answer = #{correctAnswer,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      knowledge = #{knowledge,jdbcType=VARCHAR},
      score = #{score,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>